%The fifth version of train crossing model, change the architecture
%Original architecure is difficult to deal with the sequence of the barrier state and train position
%Project2016, System validation
%Group 02

%%%%%v10.3: To make it make sense both track can come first(still no case of multiple trains arrive on same track)

sort 
%sensors 
sensorEdge     = struct S1e|S1w|S2e|S2w;%Sensors that are related to arrival and leaving.
sensorCentral  = struct S1train|S2train;%Sensors that are related to current existance of the train.
%trackID
trackID        = struct T1|T2;
%states
safeState      = struct SAFE|UNSAFE;    %system safe state
State          = struct ON|OFF;         %states of traffic lights and bell       
barState       = struct OPEN|CLOSED;    %states of barriers 
%trackState     = struct OCCUPIED|CLEAR; %states of track: OCCUPIED stands for there is train inside the range of 2 edge sensors of the track;
                                        %CLEAR means there is no train inside the range of 2 edge sensors. 
trackState    = struct  ARRIVE_e|CENTRAL2w|LEAVE_w|
                        ARRIVE_w|CENTRAL2e|LEAVE_e|
                        CLEAR;

map
%map the trackID to corresponding central sensors
matchCentral:       trackID->sensorCentral;
%map the edge sensors to corresponding "first" tracks
matchTrack:         sensorEdge->trackID;
%map the edge sensors to corresponding track states
matchFState1:        sensorEdge->trackState;
matchFState2:        sensorEdge->trackState;
%map the normal sequence for the train to pass
matchST2ST:          trackState->trackState;


eqn
%a former state->next state of a track
matchST2ST(ARRIVE_e)=CENTRAL2w;
matchST2ST(CENTRAL2w)=LEAVE_w;
matchST2ST(ARRIVE_w)=CENTRAL2e;
matchST2ST(CENTRAL2e)=LEAVE_e;

%trackID <-> corresponding central sensors
matchCentral(T1)=S1train;
matchCentral(T2)=S2train;
  
%Edge sensors <-> corresponding tracks
matchTrack(S1e)=T1;
matchTrack(S1w)=T1;
matchTrack(S2e)=T2;
matchTrack(S2w)=T2;

%Edge sensors <-> corresponding "first" track states
matchFState1(S1e)=ARRIVE_e;
matchFState1(S1w)=ARRIVE_w;
matchFState1(S2e)=CLEAR;
matchFState1(S2w)=CLEAR;

matchFState2(S1e)=CLEAR;
matchFState2(S1w)=CLEAR;
matchFState2(S2e)=ARRIVE_e;
matchFState2(S2w)=ARRIVE_w;

act
%receive sensor detection signals
r_sensorEdge:                      sensorEdge;
r_sensorCentral:                   sensorCentral;
%communication of SAFE signal between safeConfirm and Lights
r_safeSign,s_safeSign,c_safeSign:                 safeState;
%Send informaition about the first sensor signal that triggers the system to barrier
%and pass the unsafe state to the whole system.
s_firstTrigger,r_firstTrigger,c_firstTrigger:     sensorEdge # safeState;
%Pass the first trigger and safe state from light to bell;
s_light2bell,r_light2bell,c_light2bell:           sensorEdge # safeState;
%Pass the first trigger and safe state from bell to barriers;
s_bell2barrier,r_bell2barrier,c_bell2barrier:     sensorEdge # safeState;
%Pass the safe state from barriers to bell;
s_barrier2bell,r_barrier2bell,c_barrier2bell:     safeState;
%Pass the safe state from bell to lights;
s_bell2light,r_bell2light,c_bell2light:           safeState;

%Actuations
a_setSystem:                       safeState;
a_setLight:                        safeState # State;      %set the 2 lights states simutaneously
a_setBell:                         safeState # State; 
a_setBarrier:                      safeState # barState;   %set the 2 barriers states simutaneously
a_recTrack:                        trackID   # trackState; %record the current state of tracks
 
proc 

safetyConfirm(saf:safeState)=
             (saf==SAFE)->  sum sE:sensorEdge.r_sensorEdge(sE).a_setSystem(UNSAFE).s_firstTrigger(sE,UNSAFE).safetyConfirm(saf=UNSAFE)
            +(saf==UNSAFE)->r_safeSign(SAFE).a_setSystem(SAFE).safetyConfirm(saf=SAFE);

Lights(saf:safeState,state:State)=
             ((saf==SAFE)&&(state==OFF))->sum sE:sensorEdge.r_firstTrigger(sE,UNSAFE).a_setLight(UNSAFE,ON).s_light2bell(sE,UNSAFE).Lights(UNSAFE,ON)
            +((saf==UNSAFE)&&(state==ON))->r_bell2light(SAFE).a_setLight(SAFE,OFF).s_safeSign(SAFE).Lights(SAFE,OFF);

Bell(saf:safeState,state:State)=
             ((saf==SAFE)&&(state==OFF))->sum sE:sensorEdge.r_light2bell(sE,UNSAFE).a_setBell(UNSAFE,ON).s_bell2barrier(sE,UNSAFE).Bell(UNSAFE,ON)
            +((saf==UNSAFE)&&(state==ON))->r_barrier2bell(SAFE).a_setBell(SAFE,OFF).s_bell2light(SAFE).Bell(SAFE,OFF);

Barriers(saf:safeState,barST:barState,lastTrack:trackID,lastState1:trackState,lastState2:trackState)=
%lastTrack:the train on which will leave later than that on the other track;
%lastState:the state of lastTrack
             %receive the first trigger
             ((saf==SAFE)&&(barST==OPEN))->sum sE:sensorEdge.r_bell2barrier(sE,UNSAFE).a_setBarrier(UNSAFE,CLOSED).
                                         Barriers(UNSAFE,CLOSED,matchTrack(sE),matchFState1(sE),matchFState2(sE))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%             
            +((barST==CLOSED)&&(lastTrack==T2)&&
              (
               (lastState1==CLEAR)||(lastState1==CENTRAL2w)||(lastState1==ARRIVE_e)
               )           
             )
                                         ->r_sensorEdge(S1e).a_recTrack(T1,ARRIVE_e).Barriers(lastTrack=T1,lastState1=ARRIVE_e)

            +((barST==CLOSED)&&(lastTrack==T1)&&(lastState1==ARRIVE_e))
                                         ->r_sensorCentral(S1train).a_recTrack(T1,CENTRAL2w).Barriers(lastState1=CENTRAL2w)
            
            +((barST==CLOSED)&&(lastTrack==T1)&&(lastState1==CENTRAL2w))
                                         ->r_sensorEdge(S1w).a_recTrack(T1,LEAVE_w).Barriers(lastState1=LEAVE_w)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%           
            +((barST==CLOSED)&&(lastTrack==T2)&&
              (
               (lastState1==CLEAR)||(lastState1==CENTRAL2e)||(lastState1==ARRIVE_w)
               )           
             )
                                         ->r_sensorEdge(S1w).a_recTrack(T1,ARRIVE_w).Barriers(lastTrack=T1,lastState1=ARRIVE_w)

            +((barST==CLOSED)&&(lastTrack==T1)&&(lastState1==ARRIVE_w))
                                         ->r_sensorCentral(S1train).a_recTrack(T1,CENTRAL2e).Barriers(lastState1=CENTRAL2e)

            +((barST==CLOSED)&&(lastTrack==T1)&&(lastState1==CENTRAL2e))
                                         ->r_sensorEdge(S1e).a_recTrack(T1,LEAVE_e).Barriers(lastState1=LEAVE_e)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            +((barST==CLOSED)&&(lastTrack==T1)&&
              (
               (lastState2==CLEAR)||(lastState2==CENTRAL2e)||(lastState2==ARRIVE_w)
               )           
             )
                                         ->r_sensorEdge(S2w).a_recTrack(T2,ARRIVE_w).Barriers(lastTrack=T2,lastState2=ARRIVE_w)

            +((barST==CLOSED)&&(lastTrack==T2)&&(lastState2==ARRIVE_w))
                                         ->r_sensorCentral(S2train).a_recTrack(T2,CENTRAL2e).Barriers(lastState2=CENTRAL2e)

            +((barST==CLOSED)&&(lastTrack==T2)&&(lastState2==CENTRAL2e))
                                         ->r_sensorEdge(S2e).a_recTrack(T2,LEAVE_e).Barriers(lastState2=LEAVE_e)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            +((barST==CLOSED)&&(lastTrack==T1)&&
              (
               (lastState2==CLEAR)||(lastState2==CENTRAL2w)||(lastState2==ARRIVE_e)
               )           
             )
                                         ->r_sensorEdge(S2e).a_recTrack(T2,ARRIVE_e).Barriers(lastTrack=T2,lastState2=ARRIVE_e)

            +((barST==CLOSED)&&(lastTrack==T2)&&(lastState2==ARRIVE_e))
                                         ->r_sensorCentral(S2train).a_recTrack(T2,CENTRAL2w).Barriers(lastState2=CENTRAL2w)

            +((barST==CLOSED)&&(lastTrack==T2)&&(lastState2==CENTRAL2w))
                                         ->r_sensorEdge(S2w).a_recTrack(T2,LEAVE_w).Barriers(lastState2=LEAVE_w)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            +(
             (barST==CLOSED)&&
               (
               ((lastTrack==T1)&&((lastState1==LEAVE_w)||(lastState1==LEAVE_e)))||
               ((lastTrack==T2)&&((lastState2==LEAVE_w)||(lastState2==LEAVE_e)))
               )
             ) ->a_recTrack(lastTrack,CLEAR).a_setBarrier(SAFE,OPEN).s_barrier2bell(SAFE).
                                           Barriers(saf=SAFE,barST=OPEN,lastState1=CLEAR,lastState2=CLEAR);

init 
    allow
(
         {r_sensorEdge,r_sensorCentral,
           c_safeSign,c_firstTrigger,c_light2bell,c_bell2barrier,c_barrier2bell,c_bell2light,
           a_setSystem,a_setLight,a_setBell,a_setBarrier,a_recTrack
          },
    comm(
           {r_safeSign|s_safeSign->c_safeSign,s_firstTrigger|r_firstTrigger->c_firstTrigger,s_light2bell|r_light2bell->c_light2bell,
            s_bell2barrier|r_bell2barrier->c_bell2barrier,s_barrier2bell|r_barrier2bell->c_barrier2bell,
            s_bell2light|r_bell2light->c_bell2light
           },
           safetyConfirm(SAFE)||Lights(SAFE,OFF)||Bell(SAFE,OFF)||Barriers(SAFE,OPEN,T1,CLEAR,CLEAR)
         )
);
