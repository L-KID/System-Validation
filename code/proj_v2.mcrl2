sort 	% Multi-Objects
	LightID        =struct Ln|Ls|bothL;
       BellID         =struct Bellc;
       BarrierID      =struct Bn|Bs|bothB;
       SensorID       =struct S1w|S1train|S1e|
                              S2w|S2train|S2e;
       trackID        =struct T1|T2;
       

	

       % States
	State 		= struct ON | OFF;		% Traffic Lights, Bell
       barState 	= struct OPEN | CLOSED;	% Barriers
	sensorState 	= struct DETECTED;	% Sensors
       safeSign       = struct SAFE|UNSAFE;
       
       trainPosition  = struct ARRIVE_e|CENTRAL2w|LEAVE_w|
                              ARRIVE_w|CENTRAL2e|LEAVE_e;
       trackInfo      = struct CLEAR|OCCUPIED;
	

act    %communication
%%%%%
       r_liState,s_liState,comm_liState:State;
       r_beState,s_beState,comm_beState:State;
       r_barState,s_barState,comm_barState:barState;
       r_safeSign,s_safeSign,comm_safeSign:safeSign;
       r_track1Info,s_track1Info,comm_track1Info:trackID # trackInfo;
       r_track2Info,s_track2Info,comm_track2Info:trackID # trackInfo;
       %sensors
       r_sensorDETE:SensorID # sensorState;
       %change state
       a_setLight:LightID # State;
       a_setBell:BellID # State;
       a_setBarrier:BarrierID # barState;
       

proc   Light(ls:State)=(ls==OFF)-> r_safeSign(UNSAFE).a_setLight(bothL,ON).s_liState(ON).Light(ON)+
                       (ls==ON)->  r_beState(OFF).a_setLight(bothL,OFF).Light(OFF);
       
       Bell(beS:State)= (beS==OFF)-> r_liState(ON).a_setBell(Bellc,ON).s_beState(ON).Bell(ON)+
                        (beS==ON)->r_barState(OPEN).a_setBell(Bellc,OFF).s_beState(OFF).Bell(OFF);
       
       Barrier(bas:barState)=(bas==OPEN)->r_beState(ON).a_setBarrier(bothB,CLOSED).Barrier(CLOSED)+
                             (bas==CLOSED)->r_safeSign(SAFE).a_setBarrier(bothB,OPEN).s_barState(OPEN).Barrier(OPEN);
       
       safeVerify(T1State:trackInfo,T2State:trackInfo)=
                   r_track1Info(T1,OCCUPIED).s_safeSign(UNSAFE).safeVerify(T1State=OCCUPIED)+
                   r_track2Info(T2,OCCUPIED).s_safeSign(UNSAFE).safeVerify(T2State=OCCUPIED)+
                   r_track1Info(T1,CLEAR).safeVerify(T1State=CLEAR).((T2State==CLEAR)->s_safeSign(SAFE)).safeVerify(CLEAR,CLEAR)+
                   r_track2Info(T2,CLEAR).safeVerify(T2State=CLEAR).((T1State==CLEAR)->s_safeSign(SAFE)).safeVerify(CLEAR,CLEAR);
                   %((T1State==CLEAR)&&(T2State==CLEAR))->s_safeSign(SAFE).safeVerify(CLEAR,CLEAR);     
                                                         

       track1State(tr1:trackInfo,pos:trainPosition)=
                     %a train arrives from east when there's no train on track1 at the crossing.
                            (tr1==CLEAR)->r_sensorDETE(S1e,DETECTED).s_track1Info(T1,OCCUPIED).track1State(OCCUPIED,ARRIVE_e)+
                            %a train arrives from east when there is a train on track1 around the central of the crossing.
                            ((tr1==OCCUPIED)&&(pos==ARRIVE_e))->(
                     (r_sensorDETE(S1train,DETECTED).r_sensorDETE(S1e,DETECTED))+(r_sensorDETE(S1e,DETECTED).r_sensorDETE(S1train,DETECTED))+
                     (r_sensorDETE(S1train,DETECTED)|r_sensorDETE(S1e,DETECTED))
                                                                 ).track1State(OCCUPIED,ARRIVE_e)+
                            %a train passes the central sensor S1train and no other train on track1 arrives.
                            ((tr1==OCCUPIED)&&(pos==ARRIVE_e)) ->r_sensorDETE(S1train,DETECTED).track1State(OCCUPIED,CENTRAL2w)+
                            %a train arrives from east when there is a train on track1 leaving the crossing.
                            ((tr1==OCCUPIED)&&(pos==CENTRAL2w))->(
                     (r_sensorDETE(S1w,DETECTED).r_sensorDETE(S1e,DETECTED))+(r_sensorDETE(S1e,DETECTED).r_sensorDETE(S1w,DETECTED))+
                     (r_sensorDETE(S1w,DETECTED)|r_sensorDETE(S1e,DETECTED))
                                                                 ).track1State(OCCUPIED,ARRIVE_e)+ 
                            %a train leaves the crossing and no other train on track1 arrives.
                            ((tr1==OCCUPIED)&&(pos==CENTRAL2w))->r_sensorDETE(S1w,DETECTED).s_track1Info(T1,CLEAR).track1State(CLEAR,LEAVE_w)+
                            

                       %a train comes from west when there's no train on track1 at the crossing.
                            (tr1==CLEAR)->r_sensorDETE(S1w,DETECTED).s_track1Info(T1,OCCUPIED).track1State(OCCUPIED,ARRIVE_w)+
                            %a train arrives from west when there is a train on track1 around the central of the crossing.
                            ((tr1==OCCUPIED)&&(pos==ARRIVE_w))->(
                      (r_sensorDETE(S1train,DETECTED).r_sensorDETE(S1w,DETECTED))+(r_sensorDETE(S1w,DETECTED).r_sensorDETE(S1train,DETECTED))+
                      (r_sensorDETE(S1train,DETECTED)|r_sensorDETE(S1w,DETECTED))
                                                                 ).track1State(OCCUPIED,ARRIVE_w)+
                            %a train passes the central sensor S1train and no other train on track1 arrives.
                            ((tr1==OCCUPIED)&&(pos==ARRIVE_w)) ->r_sensorDETE(S1train,DETECTED).track1State(OCCUPIED,CENTRAL2e)+
                            %a train arrives from east when there is a train on track1 leaving the crossing.
                            ((tr1==OCCUPIED)&&(pos==CENTRAL2e))->(
                      (r_sensorDETE(S1e,DETECTED).r_sensorDETE(S1w,DETECTED))+(r_sensorDETE(S1w,DETECTED).r_sensorDETE(S1e,DETECTED))+
                      (r_sensorDETE(S1e,DETECTED)|r_sensorDETE(S1w,DETECTED))
                                                                  ).track1State(OCCUPIED,ARRIVE_w)+ 
                            %a train leaves the crossing and no other train on track1 arrives.
                            ((tr1==OCCUPIED)&&(pos==CENTRAL2e))->r_sensorDETE(S1e,DETECTED).s_track1Info(T1,CLEAR).track1State(CLEAR,LEAVE_e);

       track2State(tr2:trackInfo,pos:trainPosition)=  
                       %a train arrives from east when there's no train on track2 at the crossing.
                            (tr2==CLEAR)->r_sensorDETE(S2e,DETECTED).s_track2Info(T2,OCCUPIED).track2State(OCCUPIED,ARRIVE_e)+
                            %a train arrives from east when there is a train on track2 around the central of the crossing.
                            ((tr2==OCCUPIED)&&(pos==ARRIVE_e))->(
                      (r_sensorDETE(S2train,DETECTED).r_sensorDETE(S2e,DETECTED))+(r_sensorDETE(S2e,DETECTED).r_sensorDETE(S2train,DETECTED))+
                      (r_sensorDETE(S2train,DETECTED)|r_sensorDETE(S2e,DETECTED))
                                                                 ).
                                                                 track2State(OCCUPIED,ARRIVE_e)+
                            %a train passes the central sensor S1train and no other train on track2 arrives.
                            ((tr2==OCCUPIED)&&(pos==ARRIVE_e)) ->r_sensorDETE(S2train,DETECTED).track2State(OCCUPIED,CENTRAL2w)+
                            %a train arrives from east when there is a train on track2 leaving the crossing.
                            ((tr2==OCCUPIED)&&(pos==CENTRAL2w))->(
                      (r_sensorDETE(S2w,DETECTED).r_sensorDETE(S2e,DETECTED))+(r_sensorDETE(S2e,DETECTED).r_sensorDETE(S2w,DETECTED))+
                      (r_sensorDETE(S2w,DETECTED)|r_sensorDETE(S2e,DETECTED)) 
                                                                  ).
                                                                 track2State(OCCUPIED,ARRIVE_e)+ 
                            %a train leaves the crossing and no other train on track2 arrives.
                            ((tr2==OCCUPIED)&&(pos==CENTRAL2w))->r_sensorDETE(S2w,DETECTED).s_track2Info(T2,CLEAR).track2State(CLEAR,LEAVE_w)+
                            

                     %a train comes from west when there's no train on track2 at the crossing.
                            (tr2==CLEAR)->r_sensorDETE(S2w,DETECTED).s_track2Info(T2,OCCUPIED).track2State(OCCUPIED,ARRIVE_w)+
                            %a train arrives from west when there is a train on track2 around the central of the crossing.
                            ((tr2==OCCUPIED)&&(pos==ARRIVE_w))->(
                      (r_sensorDETE(S2train,DETECTED).r_sensorDETE(S2w,DETECTED))+(r_sensorDETE(S2w,DETECTED).r_sensorDETE(S2train,DETECTED))+
                      (r_sensorDETE(S2train,DETECTED)|r_sensorDETE(S2w,DETECTED))
                                                                 ).
                                                                 track2State(OCCUPIED,ARRIVE_w)+
                            %a train passes the central sensor S1train and no other train on track2 arrives.
                            ((tr2==OCCUPIED)&&(pos==ARRIVE_w)) ->r_sensorDETE(S2train,DETECTED).track2State(OCCUPIED,CENTRAL2e)+
                            %a train arrives from east when there is a train on track2 leaving the crossing.
                            ((tr2==OCCUPIED)&&(pos==CENTRAL2e))->(
                      (r_sensorDETE(S2e,DETECTED).r_sensorDETE(S2w,DETECTED))+(r_sensorDETE(S2w,DETECTED).r_sensorDETE(S2e,DETECTED))+
                      (r_sensorDETE(S2e,DETECTED)|r_sensorDETE(S2w,DETECTED))
                                                                  ).
                                                                 track2State(OCCUPIED,ARRIVE_w)+ 
                            %a train leaves the crossing and no other train on track2 arrives.
                            ((tr2==OCCUPIED)&&(pos==CENTRAL2e))->r_sensorDETE(S2e,DETECTED).s_track2Info(T2,CLEAR).track2State(CLEAR,LEAVE_e);                   
       



init   allow ({comm_liState,comm_beState,comm_barState,comm_safeSign,comm_track1Info,comm_track2Info,
               a_setLight,a_setBell,a_setBarrier,
               r_sensorDETE
              },
       comm({s_liState|r_liState->comm_liState,s_beState|r_beState->comm_beState,s_barState|r_barState->comm_barState,
             s_safeSign|r_safeSign->comm_safeSign,r_track1Info|s_track1Info->comm_track1Info,r_track2Info|s_track2Info->comm_track2Info},
                                   Light(OFF)||Bell(OFF)||Barrier(OPEN)||safeVerify(CLEAR,CLEAR)||
                                   track1State(CLEAR,LEAVE_e)||track2State(CLEAR,LEAVE_e)
            )
             );