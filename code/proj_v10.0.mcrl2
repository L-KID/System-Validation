%The fifth version of train crossing model, change the architecture
%Original architecure is difficult to deal with the sequence of the barrier state and train position
%Project2016, System validation
%Group 02

sort 
%sensors 
sensorEdge     = struct S1e|S1w|S2e|S2w;%Sensors that are related to arrival and leaving.
sensorCentral  = struct S1train|S2train;%Sensors that are related to current existance of the train.
%trackID
trackID        = struct track1|track2;
%states
safeState      = struct SAFE|UNSAFE;    %system safe state
State          = struct ON|OFF;         %states of traffic lights and bell       
barState       = struct OPEN|CLOSED;    %states of barriers 
%trackState     = struct OCCUPIED|CLEAR; %states of track: OCCUPIED stands for there is train inside the range of 2 edge sensors of the track;
                                        %CLEAR means there is no train inside the range of 2 edge sensors. 
trackState    = struct  ARRIVE_e|CENTRAL2w|LEAVE_w|
                        ARRIVE_w|CENTRAL2e|LEAVE_e|
                        CLEAR;

map
%map the edge sensors to central sensors
matchCentral:      sensorEdge->sensorCentral;
%map the edge sensors to corresponding "first" tracks
matchFTrack:       sensorEdge->trackID;
%map the edge sensors to corresponding track states
matchState:        sensorEdge->trackState;

eqn
%Edge sensors <-> corresponding central sensors
matchCentral(S1e)=S1train;
matchCentral(S1w)=S1train;
matchCentral(S2e)=S2train;
matchCentral(S2w)=S2train;

%Edge sensors <-> corresponding tracks
matchTrack(S1e)=track1;
matchTrack(S1w)=track1;
matchTrack(S2e)=track2;
matchTrack(S2w)=track2;

%Edge sensors <-> corresponding "first" track states
matchFState(S1e)=ARRIVE_e;
matchFState(S1w)=ARRIVE_w;
matchFState(S2e)=ARRIVE_e;
matchFState(S2w)=ARRIVE_w;

act
%receive sensor detection signals
r_sensorEdge:                      sensorEdge;
r_sensorCentral:                   sensorCentral;
%communication of SAFE signal between safeConfirm and Lights
r_safeSign,s_safeSign:             safeState;
%Send informaition about the first sensor signal that triggers the system to barrier
%and pass the unsafe state to the whole system.
s_firstTrigger,r_firstTrigger:     sensorEdge # safeState;
%Pass the first trigger and safe state from light to bell;
s_light2bell,r_light2bell:         sensorEdge # safeState;
%Pass the first trigger and safe state from bell to barriers;
s_bell2barrier,r_bell2barrier:     sensorEdge # safeState;

%Actuations
a_setSystem:                       safeState;
a_setLight:                        safeState # State;    %set the 2 lights states simutaneously
a_setBell:                         safeState # State; 
a_setBarrier:                      safeState # barState; %set the 2 barriers states simutaneously

proc 

safetyConfirm(saf:safeState)=
             (saf==SAFE)->  sum sE:sensorEdge.r_sensorEdge(sE).a_setSystem(UNSAFE).s_firstTrigger(sE,UNSAFE).safetyConfirm(saf=UNSAFE)
            +(saf==UNSAFE)->r_safeSign(SAFE).a_setSystem(SAFE).safeConfirm(saf=SAFE);

Lights(saf:safeState,state:State)=
             ((saf==SAFE)&&(state==OFF))->sum sE:sensorEdge.r_firstTrigger(sE,UNSAFE).a_setLight(UNSAFE,ON).s_light2bell(sE,UNSAFE).Lights(UNSAFE,ON)
            +((saf==UNSAFE)&&(state==ON))->r_;

Bell(saf:safeState,state:State)=
             ((saf==SAFE)&&(state==OFF))->sum sE:sensorEdge.r_light2bell(sE,UNSAFE).a_setBell(UNSAFE,ON).s_bell2barrier(sE,UNSAFE).Bell(UNSAFE,ON)
            +((saf==UNSAFE)&&(state==ON))->;

Barriers(saf:safeState,barST:barState,lastTrack:trackID,lastState:trackState)=
%lastTrack:the train on which will leave later than that on the other track;
%lastState:the state of lastTrack
             %receive the first trigger
             ((saf==SAFE)&&(barST==OPEN))->sum sE:sensorEdge.r_bell2barrier(sE,UNSAFE).a_setBarrier(UNSAFE,CLOSED).
                                           Barriers(UNSAFE,CLOSED,matchTrack(sE),matchFState(sE))
             %receive signal that the first train arrives the central crossing
            +((barST==CLOSED)&&())->r_sensorEdge(match(lastTrack,lastState))